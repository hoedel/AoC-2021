*&---------------------------------------------------------------------*
*& Report zhad_2021_01_1
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zhad_2021_09_02.

INCLUDE zhad_2021_selection.

CLASS zhad_2021_local DEFINITION INHERITING FROM zhad_2021_base.

  PUBLIC SECTION.

    METHODS parse_input
      RAISING /wsv/cx_bp_general.

    METHODS main REDEFINITION.

  PRIVATE SECTION.

    METHODS get_value IMPORTING x            TYPE i
                                y            TYPE i
                      RETURNING VALUE(value) TYPE i.

    METHODS determine_basin IMPORTING current   TYPE ty_2d
                            CHANGING  basin_map TYPE tt_2d.

    TYPES: BEGIN OF ty_map,
             basin_map TYPE tt_2d,
             size      TYPE i,
           END OF ty_map.

    DATA: mt_deltas TYPE tt_2d,
          mt_maps   TYPE TABLE OF ty_map.


ENDCLASS.

CLASS zhad_2021_local IMPLEMENTATION.

  METHOD parse_input.

    parse_input_2d_sep( EXPORTING by_position = p_2dpos
                        IMPORTING data = mt_2d ).

  ENDMETHOD.

  METHOD main.

    mt_deltas = VALUE #( ( y = -1   x = 0 )
                         ( y = 1    x = 0 )
                         ( y = 0    x = -1 )
                         ( y = 0    x = 1 ) ).


    DATA: basin_map TYPE ty_map.


    LOOP AT mt_2d ASSIGNING FIELD-SYMBOL(<2d>).

      IF      <2d>-value < get_value( x = ( <2d>-x )  y = ( <2d>-y - 1 ) )
       AND    <2d>-value < get_value( x = ( <2d>-x )  y = ( <2d>-y + 1 ) )
       AND    <2d>-value < get_value( x = ( <2d>-x + 1 )  y = ( <2d>-y ) )
       AND    <2d>-value < get_value( x = ( <2d>-x - 1 )  y = ( <2d>-y ) ).

        CLEAR: basin_map.

        "We be low point
        determine_basin( EXPORTING current = <2d>
                CHANGING basin_map = basin_map-basin_map ).

        basin_map-size = lines( basin_map-basin_map ).
        INSERT basin_map INTO TABLE mt_maps.

      ENDIF.

    ENDLOOP.

    SORT mt_maps BY size DESCENDING.
    LOOP AT mt_maps FROM 1 TO 3 ASSIGNING FIELD-SYMBOL(<map>).

      IF mv_result IS INITIAL.
        mv_result = <map>-size.
      ELSE.
        mv_result = mv_result * <map>-size.
      ENDIF.


    ENDLOOP.


  ENDMETHOD.

  METHOD get_value.

    TRY.

        value = mt_2d[ y = y x = x ]-value.

      CATCH cx_sy_itab_line_not_found INTO DATA(exception). "oob

        "Assume value = max+1 for the logic
        value = 11.

    ENDTRY.

  ENDMETHOD.

  METHOD determine_basin.

    " add ourself
    INSERT current INTO TABLE basin_map.

    "Check all direction
    LOOP AT mt_deltas ASSIGNING FIELD-SYMBOL(<delta>).

      " Check if we are already in the map
      READ TABLE basin_map WITH KEY y = ( current-y + <delta>-y )
                                    x = ( current-x + <delta>-x )  TRANSPORTING NO FIELDS BINARY SEARCH.
      IF sy-subrc <> 0.

        DATA(neighbour_value) = get_value( x = ( current-x + <delta>-x )  y = ( current-y + <delta>-y ) ).

        IF CONV i( current-value ) < neighbour_value
            AND neighbour_value < 9 .

          determine_basin( EXPORTING current = mt_2d[ y = ( current-y + <delta>-y ) x = ( current-x + <delta>-x ) ]
                          CHANGING basin_map = basin_map ).

        ENDIF.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.


INITIALIZATION.

  p_finput = p_finput && 'day09.txt'.

START-OF-SELECTION.

  TRY.

      DATA(riddle) = NEW zhad_2021_local( ).

      riddle->read_input( p_finput ).

      riddle->parse_input( ).

      riddle->main( ).

      riddle->print_result( ).


    CATCH /wsv/cx_bp_general INTO DATA(exception).

      exception->create_message( ).

  ENDTRY.
