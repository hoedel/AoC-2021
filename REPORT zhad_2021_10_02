*&---------------------------------------------------------------------*
*& Report zhad_2021_01_1
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zhad_2021_10_02.

INCLUDE zhad_2021_selection.

CLASS zhad_2021_local DEFINITION INHERITING FROM zhad_2021_base.

  PUBLIC SECTION.

    METHODS parse_input
      RAISING /wsv/cx_bp_general.

    METHODS main REDEFINITION.

  PRIVATE SECTION.

    TYPES: BEGIN OF ty_data,
             value TYPE char1,
           END OF ty_data.

    TYPES: BEGIN OF ty_line,
             characters TYPE STANDARD TABLE OF ty_data WITH NON-UNIQUE KEY value,
             score      TYPE int8,
           END OF ty_line.

    TYPES: BEGIN OF ty_pair,
             open  TYPE char1,
             close TYPE char1,
             value TYPE i,
           END OF ty_pair.

    DATA: mt_data  TYPE TABLE OF ty_line,
          mt_pairs TYPE TABLE OF ty_pair.



ENDCLASS.

CLASS zhad_2021_local IMPLEMENTATION.

  METHOD parse_input.

    DATA: ref_to_data TYPE REF TO data,
          line        TYPE ty_line.

    FIELD-SYMBOLS: <data>    TYPE ANY TABLE.

    LOOP AT mt_input_string ASSIGNING FIELD-SYMBOL(<input>).

      CLEAR: line.


      CLEAR: ref_to_data.
      CREATE DATA ref_to_data TYPE STANDARD TABLE OF ty_data.

      parse_input_text( EXPORTING input             = VALUE #( ( <input> ) )
                                  newline_at_sep    = p_tnewl
                                  by_position       = p_tpos
                        CHANGING data               = ref_to_data ).

      ASSIGN ref_to_data->* TO <data>.
      line-characters = <data>.

      INSERT line INTO TABLE mt_data.

    ENDLOOP.

  ENDMETHOD.

  METHOD main.


    "Init pairs

    mt_pairs = VALUE #(
    ( open = '(' close = ')' value = 1 )
    ( open = '[' close = ']' value = 2 )
    ( open = '{' close = '}' value = 3 )
    ( open = '<' close = '>' value = 4 ) ).

    DATA: open_brackets TYPE TABLE OF char1.


    LOOP AT mt_data ASSIGNING FIELD-SYMBOL(<line>).

      CLEAR: open_brackets.

      LOOP AT <line>-characters ASSIGNING FIELD-SYMBOL(<character>).

        IF <character> CA '([{<'. "Open

          INSERT <character>-value INTO TABLE open_brackets.


        ELSE. "close

          "Get correct opening bracket
          DATA(pair) = mt_pairs[ close = <character>-value ].

          "Check if latest bracket = correct opener
          IF pair-open = open_brackets[ lines( open_brackets ) ].
            "Close it
            DELETE open_brackets INDEX lines( open_brackets ).

          ELSE. "corrupt

            CLEAR: open_brackets.
            EXIT.

          ENDIF.

        ENDIF.

      ENDLOOP.

      "Apply the remaining brackets
      DO lines( open_brackets ) TIMES.

        "Get correct closing bracket
        pair = mt_pairs[ open = open_brackets[ lines( open_brackets ) - sy-index + 1 ] ].
        <line>-score = <line>-score * 5 + pair-value.


      ENDDO.

    ENDLOOP.

    DELETE mt_data WHERE score = 0. "remove corrupted

    SORT mt_data BY score.
    mv_result = mt_data[ ceil( lines( mt_data ) / 2 ) ]-score.



  ENDMETHOD.


ENDCLASS.


INITIALIZATION.

  p_finput = p_finput && 'day10.txt'.

START-OF-SELECTION.

  TRY.

      DATA(riddle) = NEW zhad_2021_local( ).

      riddle->read_input( p_finput ).

      riddle->parse_input( ).

      riddle->main( ).

      riddle->print_result( ).


    CATCH /wsv/cx_bp_general INTO DATA(exception).

      exception->create_message( ).

  ENDTRY.
