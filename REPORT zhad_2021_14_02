*&---------------------------------------------------------------------*
*& Report zhad_2021_01_1
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zhad_2021_14_02 LINE-SIZE 1023.

INCLUDE zhad_2021_selection.

PARAMETERS: p_steps TYPE i.

CLASS zhad_2021_local DEFINITION INHERITING FROM zhad_2021_base.

  PUBLIC SECTION.

    METHODS parse_input
      RAISING /wsv/cx_bp_general.

    METHODS main REDEFINITION.

  PRIVATE SECTION.

    TYPES: BEGIN OF ty_data,
             value TYPE char1,
           END OF ty_data.

    TYPES: BEGIN OF ty_pair,
             pair   TYPE char2,
             insert TYPE char1,
             count  TYPE int8,
           END OF ty_pair.


    TYPES: BEGIN OF ty_count,
             element TYPE char1,
             count   TYPE int8,
           END OF ty_count.


    DATA: mt_polymer TYPE TABLE OF ty_data,
          mt_rules   TYPE HASHED TABLE OF ty_pair WITH UNIQUE KEY pair,
          mt_pairs   TYPE HASHED TABLE OF ty_pair WITH UNIQUE KEY pair,
          mt_count   TYPE TABLE OF ty_count.


ENDCLASS.

CLASS zhad_2021_local IMPLEMENTATION.

  METHOD parse_input.

    DATA: group TYPE TABLE OF string.

    LOOP AT mt_input_string ASSIGNING FIELD-SYMBOL(<input>).

      IF <input> IS INITIAL."Empty line = end of first part polymer

        DATA: ref_to_data        TYPE REF TO data.
        FIELD-SYMBOLS: <data>    TYPE ANY TABLE.

        CREATE DATA ref_to_data TYPE TABLE OF ty_data.

        parse_input_text( EXPORTING newline_at_sep   = abap_true
                                    input            = group
                                    by_position      = abap_true
                            CHANGING data            = ref_to_data ).

        ASSIGN ref_to_data->* TO <data>.
        mt_polymer = <data>.

        CLEAR: group.

      ELSE.

        INSERT <input> INTO TABLE group.


      ENDIF.


    ENDLOOP.

    "last group = rules

    CLEAR: ref_to_data, <data>.
    CREATE DATA ref_to_data TYPE STANDARD TABLE OF ty_pair.

    parse_input_text( EXPORTING seperator1       = CONV #( p_sep1 )
                                seperator1_space = p_sspace
                                newline_at_sep   = p_tnewl
                                replace_source   = p_reps
                                remove_space     = p_remsp
                                input = group
                        CHANGING data            = ref_to_data ).

    ASSIGN ref_to_data->* TO <data>.
    mt_rules = <data>.


  ENDMETHOD.

  METHOD main.

    DATA: count       TYPE ty_count,
          index       TYPE i,
          pair_insert TYPE ty_pair,
          pair_temp   TYPE HASHED TABLE OF ty_pair WITH UNIQUE KEY pair.



    index = 1.

    "build initial pairs
    LOOP AT mt_polymer ASSIGNING FIELD-SYMBOL(<polymer>).

      TRY.
          DATA(pair) = <polymer>-value && mt_polymer[ index + 1 ]-value.
        CATCH cx_sy_itab_line_not_found INTO DATA(exception). "oob = ok
          CONTINUE.
      ENDTRY.

      READ TABLE mt_pairs WITH KEY pair = pair ASSIGNING FIELD-SYMBOL(<pair>).
      IF sy-subrc = 0.
        <pair>-count = <pair>-count + 1.
      ELSE.
        CLEAR pair_insert.
        pair_insert-pair    = pair.
        pair_insert-count   = 1.
        INSERT pair_insert INTO TABLE mt_pairs.
      ENDIF.

      index = index + 1.

    ENDLOOP.


    DATA(step) = 1.

    WHILE step <= p_steps.

      CLEAR: pair_temp.

      LOOP AT mt_pairs ASSIGNING <pair>.

        "Get insert from rule
        READ TABLE mt_rules WITH KEY pair = <pair>-pair ASSIGNING FIELD-SYMBOL(<rule>).
        IF sy-subrc = 0.
          "add two combinations

          " 1
          pair = <pair>-pair(1) && <rule>-insert.

          READ TABLE pair_temp WITH KEY pair = pair ASSIGNING FIELD-SYMBOL(<pair_temp>).
          IF sy-subrc = 0.
            <pair_temp>-count = <pair_temp>-count + <pair>-count.
          ELSE.
            CLEAR pair_insert.
            pair_insert-pair    = pair.
            pair_insert-count   = <pair>-count.
            INSERT pair_insert INTO TABLE pair_temp.
          ENDIF.

          " 2
          pair =  <rule>-insert && <pair>-pair+1(1) .

          READ TABLE pair_temp WITH KEY pair = pair ASSIGNING <pair_temp>.
          IF sy-subrc = 0.
            <pair_temp>-count = <pair_temp>-count + <pair>-count.
          ELSE.
            CLEAR pair_insert.
            pair_insert-pair    = pair.
            pair_insert-count   = <pair>-count.
            INSERT pair_insert INTO TABLE pair_temp.
          ENDIF.

        ENDIF.

      ENDLOOP.

      mt_pairs = pair_temp.

      step = step + 1.

    ENDWHILE.


    "Count

    "somehow we need to count the last element of the orig input
    count-element   = mt_polymer[ lines( mt_polymer ) ].
    count-count     = 1.
    INSERT count INTO TABLE mt_count.


    LOOP AT mt_pairs ASSIGNING <pair>.

      READ TABLE mt_count WITH KEY element = <pair>-pair(1) ASSIGNING FIELD-SYMBOL(<count>).
      IF sy-subrc = 0.

        <count>-count = <count>-count + <pair>-count.

      ELSE.

        CLEAR: count.
        count-element   = <pair>-pair(1).
        count-count     = <pair>-count.
        INSERT count INTO TABLE mt_count.

      ENDIF.

    ENDLOOP.


    SORT mt_count DESCENDING BY count.
    mv_result = mt_count[ 1 ]-count - mt_count[ lines( mt_count ) ]-count.

  ENDMETHOD.

ENDCLASS.


INITIALIZATION.

  p_finput = p_finput && 'day14.txt'.

START-OF-SELECTION.

  TRY.

      DATA(riddle) = NEW zhad_2021_local( ).

      riddle->read_input( p_finput ).

      riddle->parse_input( ).

      riddle->main( ).

      riddle->print_result( ).


    CATCH /wsv/cx_bp_general INTO DATA(exception).

      exception->create_message( ).

    CATCH cx_root INTO DATA(root_exception).

      WRITE: |Exception: { root_exception->get_longtext( ) } |.
      WRITE: / root_exception->get_text( ).

  ENDTRY.
