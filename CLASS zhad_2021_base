CLASS zhad_2021_base DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES: BEGIN OF ty_2d,
             x     TYPE i,
             y     TYPE i,
             value TYPE string,
           END OF ty_2d.

    TYPES tt_2d TYPE TABLE OF ty_2d.

    METHODS constructor.
    METHODS read_input
      IMPORTING file TYPE string
      RAISING   /wsv/cx_bp_general.

    METHODS parse_input_text
      IMPORTING seperator1       TYPE string    OPTIONAL
                seperator1_space TYPE abap_bool OPTIONAL
                newline_at_sep   TYPE abap_bool OPTIONAL
                input            TYPE string_t  OPTIONAL
      CHANGING  data             TYPE REF TO data
      RAISING   /wsv/cx_bp_general.


    METHODS parse_input_2d_sep
      IMPORTING seperator1       TYPE string    OPTIONAL
                seperator1_space TYPE abap_bool OPTIONAL
                input            TYPE string_t  OPTIONAL
      EXPORTING VALUE(data)      TYPE tt_2d.


    METHODS main.

    METHODS print_result.


  PROTECTED SECTION.
    DATA: mt_input_string TYPE TABLE OF string,
          mv_result       TYPE int8.


  PRIVATE         SECTION.
    DATA: mv_runtime_start TYPE i.


ENDCLASS.



CLASS zhad_2021_base IMPLEMENTATION.

  METHOD constructor.

    GET RUN TIME FIELD mv_runtime_start.

  ENDMETHOD.


  METHOD read_input.

    CALL METHOD cl_gui_frontend_services=>gui_upload
      EXPORTING
        filename                = file
        filetype                = 'DAT'
        has_field_separator     = ''
        replacement             = space
*       dat_mode                = 'X'
      CHANGING
        data_tab                = mt_input_string
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        not_supported_by_gui    = 17
        error_no_gui            = 18
        OTHERS                  = 19.

    IF sy-subrc <> 0.
      /wsv/cl_bp_exception_helper=>raise_from_sy( ).
    ENDIF.

  ENDMETHOD.

  METHOD print_result.

    ULINE.
    WRITE: / mv_result.

    GET RUN TIME FIELD DATA(runtime_end).

    WRITE: / |Runtime: { ( runtime_end - mv_runtime_start ) / 1000 } ms|.

  ENDMETHOD.

  METHOD main.
  ENDMETHOD.

  METHOD parse_input_text.

    DATA(input_local) = input.

    IF input_local IS INITIAL.
      input_local = mt_input_string.
    ENDIF.

    " Table
    FIELD-SYMBOLS: <data_table> TYPE ANY TABLE.
    ASSIGN data->* TO <data_table>.

    "Line
    DATA: line_ref TYPE REF TO data.

    DATA(line_descr) = CAST cl_abap_tabledescr(  cl_abap_tabledescr=>describe_by_data_ref( data ) )->get_table_line_type( ).

    CREATE DATA line_ref TYPE HANDLE line_descr.

    FIELD-SYMBOLS: <line> TYPE any.
    ASSIGN line_ref->* TO <line>.


    LOOP AT input_local ASSIGNING FIELD-SYMBOL(<input>). "Line by Line

      CLEAR: <line>.

      IF seperator1_space = abap_true.    "create new internal row at space/sep1

        SPLIT <input> AT space INTO TABLE DATA(lt_input_split1) IN CHARACTER MODE.

      ELSEIF seperator1 IS NOT INITIAL.
        SPLIT <input> AT seperator1 INTO TABLE lt_input_split1 IN CHARACTER MODE.

      ELSE. " 1:1 transfer without seperator

        INSERT <input> INTO TABLE lt_input_split1.

      ENDIF.

      "split into table lines or structure fields?
      IF newline_at_sep = abap_false. "fields

        LOOP AT lt_input_split1 ASSIGNING FIELD-SYMBOL(<input_split_1>). "field by field

          ASSIGN COMPONENT sy-tabix OF STRUCTURE <line> TO FIELD-SYMBOL(<field>).
          IF sy-subrc <> 0.
            RAISE EXCEPTION TYPE /wsv/cx_bp_general MESSAGE e037(xml_42) WITH sy-tabix.
          ENDIF.

          <field> = <input_split_1>.

        ENDLOOP.

        INSERT <line> INTO TABLE <data_table>.

      ELSE. "lines

        LOOP AT lt_input_split1 ASSIGNING <input_split_1>.

          ASSIGN COMPONENT 1 OF STRUCTURE <line> TO <field>.
          IF sy-subrc <> 0.
            RAISE EXCEPTION TYPE /wsv/cx_bp_general MESSAGE e037(xml_42) WITH sy-tabix.
          ENDIF.
          <field> = <input_split_1>.
          INSERT <line> INTO TABLE <data_table>.

        ENDLOOP.


      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD parse_input_2d_sep.

    DATA(input_local) = input.

    IF input_local IS INITIAL.
      input_local = mt_input_string.
    ENDIF.

    DATA : line TYPE ty_2d.
    DATA(index_y) = 0.

    LOOP AT input_local ASSIGNING FIELD-SYMBOL(<input>).

      IF <input> IS INITIAL.
        EXIT.
      ENDIF.

      CONDENSE <input>.

      DATA(index_x) = 0.

      IF seperator1_space = abap_true.    "create new internal row at space/sep1

        SPLIT <input> AT space INTO TABLE DATA(lt_input_split1) IN CHARACTER MODE.

      ELSEIF seperator1 IS NOT INITIAL.
        SPLIT <input> AT seperator1 INTO TABLE lt_input_split1 IN CHARACTER MODE.

      ENDIF.

      LOOP AT lt_input_split1 ASSIGNING FIELD-SYMBOL(<input_split_1>).

        CLEAR: line.

        line-x      = index_x.
        line-y      = index_y.
        line-value  = <input_split_1>.

        INSERT line INTO TABLE data.

        index_x = index_x + 1.


      ENDLOOP.

      index_y = index_y + 1.

    ENDLOOP.

  ENDMETHOD.


ENDCLASS.
